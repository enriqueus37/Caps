#include <Arduino.h>
#include <Keypad.h>

#define NOTE_G5  784
#define NOTE_C6  1047
#define NOTE_D5  587

#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BNO055.h>
#include <utility/imumaths.h>
#include "SD.h"
#define SD_ChipSelectPin 10
#include "TMRpcm.h"
#include "SPI.h"

TMRpcm tmrpcm;

/* Set the delay between fresh samples */
#define BNO055_SAMPLERATE_DELAY_MS (100)
Adafruit_BNO055 bno = Adafruit_BNO055(55);

int pinSpeak = 9;
int pinButton = 14;
int pushVal = 0;

const byte ROWS = 4; //four rows
const byte COLS = 3; //three columns
//define the cymbols on the buttons of the keypads
char keys[ROWS][COLS] = {
  {'1','2','3'},
  {'4','5','6'},
  {'7','8','9'},
  {'*','0','#'} 
};
byte rowPins[ROWS] = {8, 7, 6, 5}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {4, 3, 2}; //connect to the column pinouts of the keypad

//initialize an instance of class NewKeypad
Keypad keyPad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS); 

void displaySensorDetails(void)
{
  sensor_t sensor;
  bno.getSensor(&sensor);
  Serial.println("----------SENSOR DETAILS------------");
  Serial.print  ("Sensor:       "); Serial.println(sensor.name);
  Serial.print  ("Driver Ver:   "); Serial.println(sensor.version);
  Serial.print  ("Unique ID:    "); Serial.println(sensor.sensor_id);
  Serial.print  ("Max Value:    "); Serial.print(sensor.max_value); Serial.println(" xxx");
  Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" xxx");
  Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" xxx");
  Serial.println("------------------------------------");
  Serial.println("");
  delay(500);
}

void displaySensorStatus(void)
{
  /* Get the system status values (mostly for debugging purposes) */
  uint8_t system_status, self_test_results, system_error;
  system_status = self_test_results = system_error = 0;
  bno.getSystemStatus(&system_status, &self_test_results, &system_error);

  /* Display the results in the Serial Monitor */
  Serial.println("---------SENSOR STATUS-------------");
  Serial.println("");
  Serial.print("System Status: 0x");
  Serial.println(system_status, HEX); 
  Serial.print("Self Test:     0x");
  Serial.println(self_test_results, HEX);
  Serial.print("System Error:  0x");
  Serial.println(system_error, HEX);
  Serial.println("------------------------------------");
  Serial.println("");
  delay(500);
}

void displayCalStatus(void)
{
  /* Get the four calibration values (0..3) */
  /* Any sensor data reporting 0 should be ignored, */
  /* 3 means 'fully calibrated" */
  uint8_t system, gyro, accel, mag;
  system = gyro = accel = mag = 0;
  bno.getCalibration(&system, &gyro, &accel, &mag);

  /* The data should be ignored until the system calibration is > 0 */
  Serial.print("\t");
  if (!system)
  {
    Serial.println("-----CALIBRATRION STATUS--------");
  }

  /* Display the individual values */
  Serial.print("Sys:");
  Serial.print(system, DEC);
  Serial.print(" G:");
  Serial.print(gyro, DEC);
  Serial.print(" A:");
  Serial.print(accel, DEC);
  Serial.print(" M:");
  Serial.print(mag, DEC);

}

String readVal()
{
  String myString = "";
  char keyPressed = keyPad.getKey();
  while (keyPressed != '#')
  {
    keyPressed = keyPad.getKey();
    if (keyPressed == '*')
    {
      // Serial.println("Star Pressed");
      myString.concat(".");  
    }
    else if ((keyPressed != NO_KEY) && (keyPressed != '#'))
    {
      myString.concat(keyPressed);
      //Serial.println(keyPressed);
      //playTone();
    }
  }  
  return(myString);  
}

void angleMeasureLoop(float entry)
{
  float entryNearPos = entry + 0.5;
  float entryNearNeg = entry - 0.5;
  
  float entryMedPosA = entry + 0.6;
  float entryMedPosB = entry + 5;
  float entryMedNegA = entry - 0.6;
  float entryMedNegB = entry - 5; 

  float entryFarPosA = entry + 5.1;
  float entryFarPosB = entry + 10;
  float entryFarNegA = entry - 5.1;
  float entryFarNegB = entry - 10;
  
  LOOP: pushVal = digitalRead(pinButton);
  while(pushVal == HIGH)
  {
    sensors_event_t event;
    bno.getEvent(&event);
    float xPos = event.orientation.x;
    
    float rangeNear = constrain(xPos, entryNearNeg, entryNearPos);
    
    float rangeMedPos = constrain(xPos, entryMedPosA, entryMedPosB);
    float rangeMedNeg = constrain(xPos, entryMedNegB, entryMedNegA);
    float rangeMedZero;
    if (entryMedNegB < 0)
    {
      rangeMedZero = constrain(xPos, 360 + entryMedNegB, 359.9);
    }
    float rangeMed360;
    if (entryMedPosB > 360)
    {
      rangeMed360 = constrain (xPos, 0, entryMedPosB - 360); 
    }
    
    float rangeFarPos = constrain(xPos, entryFarPosA, entryFarPosB);
    float rangeFarNeg = constrain(xPos, entryFarNegB, entryFarNegA);
    float rangeFarZero;
    if (entryFarNegB < 0)
    {
      rangeFarZero = constrain(xPos, 360 + entryFarNegB, 365 + entryFarNegB);
    }
    float rangeFar360;
    if (entryFarPosB > 360)
    {
      rangeFar360 = constrain(xPos, entryMedPosB - 360, entryFarPosB - 360);
    }
    /* New line for the next sample */
    Serial.println("");  
    /* Wait the specified delay before requesting nex data */
    delay(BNO055_SAMPLERATE_DELAY_MS);
    /* Display the floating point data */
    Serial.print("X: ");
    Serial.print(event.orientation.x, 1);
      
    while(xPos == rangeNear)
    {
      Serial.print("\nSUCCESS!!");
      tone(pinSpeak,1047,300);
      break;
      delay(1);
    }
    while(xPos == rangeMedPos || xPos == rangeMedNeg || xPos == rangeMedZero || xPos == rangeMed360)
    {
      tone(pinSpeak,784,300);
      break;
      delay(1);
    }
    while(xPos == rangeFarPos || xPos == rangeFarNeg || xPos == rangeFarZero || xPos == rangeFar360)
    {
      tone(pinSpeak, 587, 300);
      break;
      delay(1);
    }
    goto LOOP;
}
  Serial.print("\nexit Loop");
}

void ReadButton(float xpos)
{
  // Declare original pos values
  int xposhunddig, xposhundteendig, xpostensdig, xposonesdig, xposdecdig, xposteensdig; //Declaring the digit values of the original pos values

  //If the read button is pushed
 
      Serial.println("");
      Serial.println("I Gotta P");
      xposdecdig = round(fmod(xpos,1) * 10); // First digit decimal file
      if (xposdecdig == 10) 
      {
        xposdecdig = 0; // First digit decimal file
      }
      char decimal[6]; // Declare the Char Matrix of File

      if (xpos >= 100.0)
     //If angle is 100 or higher
      {
          xposhunddig = (xpos - fmod(xpos,100)); // 100 file
          xpostensdig = (fmod(xpos,100) - fmod(xpos,10)); // 10 file
          xposhundteendig = (fmod(xpos,100) - (fmod(xpos,1))); // Teens file
          xposonesdig = (fmod(xpos,10) - fmod(xpos,1)); // 1 file
          
          char hundreds[7]; // Declare the Char Matrix of File
          char tens[7]; // Declare the Char Matrix of File
          char teens[7]; // Declare the Char Matrix of File
          char ones[6]; // Declare the Char Matrix of File

          if (((fmod(xpos,10) - fmod(xpos,1)) != 0) && ((fmod(xpos,100) - fmod(xpos,10)) != 10) && ((fmod(xpos,100) - fmod(xpos,10)) != 0)) 
          //if 1s digit is not 0 and 10s digit is not 0 or 1
          { 
            sprintf(hundreds,"%03d.wav",xposhunddig);
            Serial.println(""); 
            Serial.println(hundreds);
            tmrpcm.play(hundreds); // Play 100s File
            delay(1000);
            
            sprintf(tens,"%02d.wav",xpostensdig);
            Serial.println(""); 
            Serial.println(tens);
            tmrpcm.play(tens); // Play 10s File
            delay(1000);
            
            sprintf(ones,"%01d.wav",xposonesdig);
            Serial.println(""); 
            Serial.println(ones);
            tmrpcm.play(ones); // Play 1s File
            delay(1000);
            
            tmrpcm.play("point.wav");
            delay(700);
            
            sprintf(decimal,"%01d.wav",xposdecdig);
            Serial.println(""); 
            Serial.println(decimal);
            tmrpcm.play(decimal); // Play Decimal File
            delay(1000);
          }
          else if (((fmod(xpos,10) - fmod(xpos,1)) == 0) && ((fmod(xpos,100) - fmod(xpos,10)) != 10) && ((fmod(xpos,100) - fmod(xpos,10)) != 0))
          //if 1s digit is 0 and 10s digit is not 0 or 1
          {
            sprintf(hundreds,"%03d.wav",xposhunddig);
            Serial.println(""); 
            Serial.println(hundreds);
            tmrpcm.play(hundreds); // Play 100s File
            delay(1000);
            
            sprintf(tens,"%02d.wav",xpostensdig);
            Serial.println(""); 
            Serial.println(tens);
            tmrpcm.play(tens); // Play 10s File
            delay(1000);
            
            tmrpcm.play("point.wav");
            delay(700);
            
            sprintf(decimal,"%01d.wav",xposdecdig);
            Serial.println(""); 
            Serial.println(decimal);
            tmrpcm.play(decimal); // Play Decimal File
            delay(1000);
          }
          else if ((fmod(xpos,100) - fmod(xpos,10)) == 10) //if the angle is a hundreds teens digit e.g (216,119)
         {
            sprintf(hundreds,"%03d.wav",xposhunddig);
            Serial.println(""); 
            Serial.println(hundreds);
            tmrpcm.play(hundreds); // Play 100s File
            delay(1000);
            
            sprintf(teens,"%02d.wav",xposhundteendig);
            Serial.println(""); 
            Serial.println(teens);
            tmrpcm.play(teens); // Play 10s File
            delay(1000);
            
            tmrpcm.play("point.wav");
            delay(700);
            
            sprintf(decimal,"%01d.wav",xposdecdig);
            Serial.println(""); 
            Serial.println(decimal);
            tmrpcm.play(decimal); // Play Decimal File
            delay(1000);
         }
         else if (((fmod(xpos,100) - fmod(xpos,10)) == 0) && ((fmod(xpos,10) - fmod(xpos,1)) != 0)) //if the angle is a hundred, 10s digit is 0, and a 1s digit e.g (101,305)
         {
            sprintf(hundreds,"%03d.wav",xposhunddig);
            Serial.println(""); 
            Serial.println(hundreds);
            tmrpcm.play(hundreds); // Play 100s File
            delay(1000);
            
            sprintf(ones,"%01d.wav",xposonesdig);
            Serial.println(""); 
            Serial.println(ones);
            tmrpcm.play(ones); // Play 1s File
            delay(1000);
            
            tmrpcm.play("point.wav");
            delay(700);
            
            sprintf(decimal,"%01d.wav",xposdecdig);
            Serial.println(""); 
            Serial.println(decimal);
            tmrpcm.play(decimal); // Play Decimal File
            delay(1000);
         }
         else if (((fmod(xpos,10) - fmod(xpos,1)) == 0) && ((fmod(xpos,100) - fmod(xpos,10)) == 0)) // if the 10s and 1s digit are 0 e.g (100,200)
         //If both 10s and 1s are 0
         {
            sprintf(hundreds,"%03d.wav",xposhunddig);
            Serial.println(""); 
            Serial.println(hundreds);
            tmrpcm.play(hundreds); // Play 100s File
            delay(1000);
            
            tmrpcm.play("point.wav");
            delay(700);
            
            sprintf(decimal,"%01d.wav",xposdecdig);
            Serial.println(""); 
            Serial.println(decimal);
            tmrpcm.play(decimal); // Play Decimal File
            delay(1000);
         }
      }
      else if (xpos < 100 && xpos >= 20) // if the angle is less than 100 and greater than 20
         {
          xpostensdig = (xpos - fmod(xpos,10));
          xposonesdig = (fmod(xpos,10) - fmod(xpos,1));
          
          char tens[7]; // Declare the Char Matrix of File 
          char ones[7]; // Declare the Char Matrix of File
          
          if((fmod(xpos,10) - fmod(xpos,1)) != 0) // If ones digit is not 0
          {
            sprintf(tens,"%02d.wav",xpostensdig);
            Serial.println(""); 
            Serial.println(tens);
            tmrpcm.play(tens); // Play 10s File
            delay(1000);
            
            sprintf(ones,"%01d.wav",xposonesdig);
            Serial.println(""); 
            Serial.println(ones);
            tmrpcm.play(ones); // Play 1s File
            delay(1000);
            
            tmrpcm.play("point.wav");
            delay(700);
            
            sprintf(decimal,"%01d.wav",xposdecdig);
            Serial.println(""); 
            Serial.println(decimal);
            tmrpcm.play(decimal); // Play Decimal File
            delay(1000);
          }
          else if (fmod(xpos,10) - fmod(xpos,1) == 0) // If ones digit is 0
          {
            sprintf(tens,"%02d.wav",xpostensdig);
            Serial.println(""); 
            Serial.println(tens);
            tmrpcm.play(tens); // Play 10s File
            delay(1000);
            
            tmrpcm.play("point.wav");
            delay(700);
            sprintf(decimal,"%01d.wav",xposdecdig);
            Serial.println(""); 
            Serial.println(decimal);
            tmrpcm.play(decimal); // Play Decimal File
            delay(1000);
          }
       }
         else if ((xpos < 20) && (xpos >= 10)) //If the angle is in the teens
         {
          xposteensdig = (xpos - fmod(xpos,1));

          char teens[7]; // Declare the Char Matrix of File

          sprintf(teens,"%02d.wav",xposteensdig);
          Serial.println(""); 
          Serial.println(teens);
          tmrpcm.play(teens); // Play 10s File
          delay(1000);
          
          tmrpcm.play("point.wav");
          delay(700);
          
          sprintf(decimal,"%01d.wav",xposdecdig);
          Serial.println(""); 
          Serial.println(decimal);
          tmrpcm.play(decimal); // Play Decimal File
          delay(1000);
         }
       else if ((xpos <10) && (xpos >= 0)) // If angle is in the ones
         {
          xposonesdig = (xpos - fmod(xpos,1));
          char ones[6]; // Declare the Char Matrix of File
            sprintf(ones,"%01d.wav",xposonesdig);
            Serial.println(""); 
            Serial.println(ones);
            tmrpcm.play(ones); // Play 1s File
            delay(1000);
            
            tmrpcm.play("point.wav");
            delay(700);
            
            sprintf(decimal,"%01d.wav",xposdecdig);
            Serial.println(""); 
            Serial.println(decimal);
            tmrpcm.play(decimal); // Play Decimal File
            delay(1000);
         }
}

/* TEST FUNCTION - how to setup pushbutton dependent loop functions
             - if notPressed >> loop
             - if Pressed    >> exit loop */
void pushButtonTest()
{
  LOOP: pushVal = digitalRead(pinButton);
  while (pushVal == HIGH)
  {
    Serial.print("\n0");
    goto LOOP;
  }
  Serial.print("exit");
}

void setup()
{
  tmrpcm.speakerPin = pinSpeak;
  Serial.begin(9600);
  pinMode(pinButton, INPUT);
  Serial.println("Orientation Sensor Test"); Serial.println("");

  /* Initialise the sensor */
  if(!bno.begin())
  {
    /* There was a problem detecting the BNO055 ... check your connections */
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
    while(1);
  }
  
  if (!SD.begin(SD_ChipSelectPin)) 
  {
    Serial.println("SD fail");
    return;
  }

  delay(1000);

  /* Display some basic information on this sensor */
  displaySensorDetails();

  /* Optional: Display current status */
  displaySensorStatus();
  
  /* Optional: Display Calibration Status*/
  // displayCalStatus();

  bno.setExtCrystalUse(true);

tmrpcm.setVolume(6);  
}
  
void loop()
{
  //char keyPressed = keyPad.getKey();
  
  LOOP: Serial.print("\nInput desired angle...");
  String entry = readVal();
  float entryFloat = entry.toFloat();
  
  if (entryFloat > 360.00)
  {
    // voice "INVALID"
    Serial.print("\nEntry too Long");
    goto LOOP;
  }
  else
  { 
    ReadButton(entryFloat);
  }
  Serial.print("\nString Value:  ");
  Serial.print(entry);
  Serial.print("\nFloat Value:  ");
  Serial.println(entryFloat);
  
  // pushButtonTest();
   angleMeasureLoop(entryFloat);  
}
