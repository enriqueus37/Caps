#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BNO055.h>
#include <utility/imumaths.h>
#include "SD.h"
#define SD_ChipSelectPin 53
#include "TMRpcm.h"
#include "SPI.h"
#define NOTE_G5  784
#define NOTE_C6  1047
#define NOTE_D5  587

int pinSpeaker = 8;

TMRpcm tmrpcm;

/* This driver uses the Adafruit unified sensor library (Adafruit_Sensor),
   which provides a common 'type' for sensor data and some helper functions.

   To use this driver you will also need to download the Adafruit_Sensor
   library and include it in your libraries folder.

   You should also assign a unique ID to this sensor for use with
   the Adafruit Sensor API so that you can identify this particular
   sensor in any data logs, etc.  To assign a unique ID, simply
   provide an appropriate value in the constructor below (12345
   is used by default in this example).

   Connections
   ===========
   Connect SCL to analog 5
   Connect SDA to analog 4
   Connect VDD to 3-5V DC
   Connect GROUND to common ground

   History
   =======
   2015/MAR/03  - First release (KTOWN)
   2015/AUG/27  - Added calibration and system status helpers
*/

/* Set the delay between fresh samples */
#define BNO055_SAMPLERATE_DELAY_MS (100)

Adafruit_BNO055 bno = Adafruit_BNO055(55);

void DefaultMode(float xpos)
  {
    float ninetyrange = constrain(xpos,89.5,90.5);
    float threesixtyrange = constrain(xpos,359.5,360);
    float zerorange = constrain(xpos,0.0,0.5);
    float oneeightyrange = constrain(xpos,179.5,180.5);
    float twoseventy = constrain(xpos,269.5,270.5);
    while(xpos == ninetyrange || xpos == zerorange || xpos == threesixtyrange || xpos == oneeightyrange || xpos == twoseventy)
    {
    tone(pinSpeaker,1047,300);
    break;
    delay(1);
    }
    float higherninety = constrain(xpos,90.6,95);
    float lowerninety = constrain(xpos,85,89.4);
    float higherzero = constrain(xpos,0.6,5);
    float lowerzero = constrain(xpos,355,359.4);
    float higheroneeighty = constrain(xpos,180.6,185);
    float loweroneeighty = constrain(xpos,175,179.4);
    float higheroneseventy = constrain(xpos,270.5,275);
    float loweroneseventy = constrain(xpos,265,269.4);
    while(xpos == higherninety || xpos == lowerninety || xpos == higherzero || xpos == lowerzero || xpos == higheroneeighty || xpos==loweroneeighty || xpos==higheroneseventy || xpos==loweroneseventy)
    {
    tone(pinSpeaker,784,300);
    break;
    delay(1);
    }
    float highninety = constrain(xpos,95.1,100);
    float lowninety = constrain(xpos,80,84.9);
    float highzero = constrain(xpos,5.1,10);
    float lowzero = constrain(xpos,350,354.9);
    float highoneeighty = constrain(xpos,185.1,190);
    float lowoneeighty = constrain(xpos,170,174.9);
    float highoneseventy = constrain(xpos,275.1,280);
    float lowoneseventy = constrain(xpos,260,264.9);
    while(xpos == highninety || xpos == lowninety || xpos == highzero || xpos == lowzero || xpos == highoneeighty || xpos==lowoneeighty || xpos==highoneseventy || xpos==lowoneseventy)
    {
    tone(pinSpeaker,587,300);
    break;
    delay(1);
    }
  }

/**************************************************************************/
/*
    Arduino setup function (automatically called at startup)
*/
/**************************************************************************/
void setup()
{ 
  tmrpcm.speakerPin = pinSpeaker;
  Serial.begin(9600);
  Serial.println("Sensor Default Mode Test"); Serial.println("");

  /* Initialise the sensor */
  if(!bno.begin())
  {
    /* There was a problem detecting the BNO055 ... check your connections */
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
    while(1);
  }

  if (!SD.begin(SD_ChipSelectPin)) 
  {
    Serial.println("SD fail");
    return;
  }

  delay(1000);

  bno.setExtCrystalUse(true);

tmrpcm.setVolume(6);
}
/**************************************************************************/
/*
    Arduino loop function, called once 'setup' is complete (your own code
    should go here)
*/
/**************************************************************************/
void loop(void)
{
  /* Get a new sensor event */
  sensors_event_t event;
  bno.getEvent(&event);
  float xpos = event.orientation.x;

  /* New line for the next sample */
  Serial.println("");

  /* Wait the specified delay before requesting nex data */
  delay(BNO055_SAMPLERATE_DELAY_MS);

 
  /* Display the floating point data */
  Serial.print("X: ");
  Serial.print(event.orientation.x, 1);

  DefaultMode(xpos);

  if(Serial.available())
  {    
    if(Serial.read() == 'p')
    { //send the letter p over the serial monitor to start playback
      tmrpcm.play("0.wav");
      Serial.println("");
      Serial.println("I Gotta P");
    }
  } 
}
